---
- name: Install Modern Unix Tools
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # User and path variables
    homebrew_user: "{{ ansible_env.USER }}"
    homebrew_group: "{{ ansible_env.USER }}"
    homebrew_prefix: "/home/linuxbrew/.linuxbrew"
    homebrew_install_path: "/home/{{ homebrew_user }}/.linuxbrew"

    # Packages to be installed
    apt_packages:
      - git
      - curl
      - wget
      - tmux
      - htop
      - python3-pip
    homebrew_packages:
      - bat
      - eza
      - ripgrep
      - fd
      - duf
      - broot
      - fzf
      - mcfly
      - zoxide
      - bottom
      - procs
      - hyperfine
      - gping
      - dog
      - git-delta
      - dust
      - neovim

    # Logging variables
    log_file: "/tmp/modern_unix_tools_install.log"

  tasks:
    # Update apt cache
    - name: Update apt cache
      become: true
      apt:
        update_cache: yes
        cache_valid_time: 3600
      register: apt_update_result

    # Log apt update result
    - name: Log apt update result
      copy:
        content: "Apt cache update: {{ 'Success' if apt_update_result.changed else 'No update needed' }}\n"
        dest: "{{ log_file }}"
        mode: "a"

    # Install essential apt packages
    - name: Install essential apt packages
      become: true
      apt:
        name: "{{ apt_packages }}"
        state: present
      register: apt_install_result

    # Log apt install result
    - name: Log apt install result
      copy:
        content: "Apt packages installation: {{ 'Success' if apt_install_result.changed else 'No changes required' }}\n"
        dest: "{{ log_file }}"
        mode: "a"

    # Display apt install result
    - name: Display apt install result
      debug:
        msg: "Apt packages installation: {{ 'Success' if apt_install_result.changed else 'No changes required' }}"

    # Install tldr using pip
    - name: Install tldr using pip
      become: true
      pip:
        name: tldr
        state: latest
      register: tldr_install_result

    # Log tldr install result
    - name: Log tldr install result
      copy:
        content: "TLDR installation: {{ 'Success' if tldr_install_result.changed else 'Already installed' }}\n"
        dest: "{{ log_file }}"
        mode: "a"

    # Check if Homebrew is installed
    - name: Check if Homebrew is installed
      stat:
        path: "{{ homebrew_prefix }}/bin/brew"
      register: homebrew_check

    # Install Homebrew if not already installed
    - name: Install Homebrew
      when: not homebrew_check.stat.exists
      block:
        - name: Run Homebrew installation script
          shell: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          args:
            creates: "{{ homebrew_prefix }}/bin/brew"
          become: false
          register: homebrew_install_result

        - name: Add Homebrew to PATH
          lineinfile:
            path: "/home/{{ homebrew_user }}/.profile"
            line: 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'
            create: yes

        # Log Homebrew install result
        - name: Log Homebrew install result
          copy:
            content: "Homebrew installation: {{ 'Success' if homebrew_install_result.changed else 'Already installed' }}\n"
            dest: "{{ log_file }}"
            mode: "a"

    # Unlink 'choose' package if installed (to avoid conflicts with choose-rust)
    - name: Unlink choose if installed
      command: brew unlink choose
      ignore_errors: yes
      become: false
      become_user: "{{ homebrew_user }}"
      environment:
        PATH: "{{ homebrew_prefix }}/bin:{{ ansible_env.PATH }}"
      register: unlink_choose_result

    # Log 'choose' unlink result
    - name: Log choose unlink result
      copy:
        content: "Unlink 'choose': {{ 'Success' if unlink_choose_result.changed else 'Not needed' }}\n"
        dest: "{{ log_file }}"
        mode: "a"

    # Install Homebrew packages
    - name: Install Homebrew packages
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop: "{{ homebrew_packages }}"
      become: false
      become_user: "{{ homebrew_user }}"
      environment:
        PATH: "{{ homebrew_prefix }}/bin:{{ ansible_env.PATH }}"
      register: brew_result
      ignore_errors: yes

    # Install choose-rust separately
    - name: Install choose-rust
      community.general.homebrew:
        name: choose-rust
        state: present
      become: false
      become_user: "{{ homebrew_user }}"
      environment:
        PATH: "{{ homebrew_prefix }}/bin:{{ ansible_env.PATH }}"
      register: choose_rust_result
      ignore_errors: yes

    # Log Homebrew packages installation results
    - name: Log Homebrew packages installation results
      copy:
        content: |
          Homebrew packages installation:
          {% for item in brew_result.results %}
          {{ item.item }}: {{ 'Success' if not item.failed else 'Failed' }}
          {% endfor %}
          choose-rust: {{ 'Success' if not choose_rust_result.failed else 'Failed' }}
        dest: "{{ log_file }}"
        mode: "a"

    # Display summary of installations
    - name: Display installation summary
      debug:
        msg: |
          Installation Summary:
          {% for item in brew_result.results %}
          {{ item.item }}: {{ 'OK' if not item.failed else 'Failed' }}
          {% endfor %}
          choose-rust: {{ 'OK' if not choose_rust_result.failed else 'Failed' }}

    # Notify user about log file
    - name: Notify user about log file
      debug:
        msg: "Detailed installation log can be found at {{ log_file }}"

    # Add tool configurations to .bashrc
    - name: Add tool configurations to .bashrc
      blockinfile:
        path: "/home/{{ homebrew_user }}/.bashrc"
        block: |
          # FZF
          [ -f ~/.fzf.bash ] && source ~/.fzf.bash

          # Broot
          source /home/{{ homebrew_user }}/.config/broot/launcher/bash/br

          # Zoxide
          eval "$(zoxide init bash)"

          # McFly
          eval "$(mcfly init bash)"

          # Aliases
          alias cat="bat"
          alias ls="eza"
          alias l="eza -l"
          alias la="eza -la"
          alias tree="eza --tree"
          alias find="fd"
          alias top="btm"
          alias du="dust"
          alias dig="dog"
          alias cd="z"
          alias diff="delta"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Modern Unix tools configuration"

    # Final reminder to user
    - name: Remind user to restart shell
      debug:
        msg: "Remember to restart your shell or run 'source ~/.bashrc' to apply changes."
